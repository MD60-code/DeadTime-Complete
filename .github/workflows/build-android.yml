name: DeadTime Step 2 - Advanced UI + Content System

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r23c
        
    - name: Set NDK environment variables
      run: |
        echo "ANDROID_NDK_ROOT=$ANDROID_NDK_HOME" >> $GITHUB_ENV
        echo "ANDROID_NDK_HOME=$ANDROID_NDK_HOME" >> $GITHUB_ENV
        echo "NDK_HOME=$ANDROID_NDK_HOME" >> $GITHUB_ENV

    - name: üßπ Clean Previous Build
      run: |
        rm -rf node_modules
        rm -rf package-lock.json
        rm -rf android/app/src/main/java/

    - name: üé® Create Advanced DeadTime UI + Content System
      run: |
        cd android/app/src/main
        
        mkdir -p java/com/deadtime
        
        # 1. CONTENT MANAGER - Handles different content types
        cat > java/com/deadtime/ContentManager.java << 'EOF'
        package com.deadtime;
        
        import android.content.Context;
        import android.util.Log;
        import java.util.ArrayList;
        import java.util.List;
        import java.util.Random;
        
        public class ContentManager {
            private static final String TAG = "ContentManager";
            private Context context;
            private List<ContentOpportunity> availableContent;
            private Random random = new Random();
            
            public ContentManager(Context context) {
                this.context = context;
                this.availableContent = new ArrayList<>();
                loadContentLibrary();
            }
            
            private void loadContentLibrary() {
                // Video Content
                availableContent.add(new ContentOpportunity(
                    "üì∫ Video Prodotto Tesla", 
                    "Scopri la nuova Model 3", 
                    4.50, 
                    180, // 3 minutes
                    ContentType.VIDEO,
                    "#e74c3c",
                    "https://example.com/tesla-video"
                ));
                
                availableContent.add(new ContentOpportunity(
                    "üé¨ Trailer Film Marvel", 
                    "Anteprima esclusiva", 
                    2.80, 
                    120, 
                    ContentType.VIDEO,
                    "#9b59b6",
                    "https://example.com/marvel-trailer"
                ));
                
                // Survey Content
                availableContent.add(new ContentOpportunity(
                    "üìã Sondaggio Alimentare", 
                    "Le tue preferenze culinarie", 
                    3.20, 
                    240, 
                    ContentType.SURVEY,
                    "#3498db",
                    "Aiuta i ristoranti locali a migliorare"
                ));
                
                availableContent.add(new ContentOpportunity(
                    "üìä Ricerca di Mercato", 
                    "Prodotti tecnologici", 
                    5.50, 
                    300, 
                    ContentType.SURVEY,
                    "#2ecc71",
                    "La tua opinione vale oro"
                ));
                
                // Interactive Content
                availableContent.add(new ContentOpportunity(
                    "üéÆ Mini-Game Sponsor", 
                    "Puzzle sponsorizzato", 
                    1.80, 
                    90, 
                    ContentType.INTERACTIVE,
                    "#f39c12",
                    "Gioca e guadagna"
                ));
                
                availableContent.add(new ContentOpportunity(
                    "üß© Quiz Cultura", 
                    "Metti alla prova le tue conoscenze", 
                    2.30, 
                    150, 
                    ContentType.INTERACTIVE,
                    "#e67e22",
                    "10 domande divertenti"
                ));
                
                // Local Business Content  
                availableContent.add(new ContentOpportunity(
                    "üçï Demo Pizzeria Locale", 
                    "Nuovo menu autunno", 
                    6.20, 
                    200, 
                    ContentType.LOCAL_DEMO,
                    "#c0392b",
                    "Scopri il ristorante vicino a te"
                ));
                
                availableContent.add(new ContentOpportunity(
                    "üíÑ Prova Prodotto Beauty", 
                    "Nuova linea cosmetica", 
                    4.80, 
                    180, 
                    ContentType.LOCAL_DEMO,
                    "#8e44ad",
                    "Test gratuito in store"
                ));
                
                Log.d(TAG, "‚úÖ Loaded " + availableContent.size() + " content opportunities");
            }
            
            public List<ContentOpportunity> getPersonalizedContent(int maxItems) {
                List<ContentOpportunity> personalized = new ArrayList<>();
                
                // Shuffle and select random content
                List<ContentOpportunity> shuffled = new ArrayList<>(availableContent);
                for (int i = 0; i < Math.min(maxItems, shuffled.size()); i++) {
                    int randomIndex = random.nextInt(shuffled.size());
                    ContentOpportunity content = shuffled.remove(randomIndex);
                    
                    // Add some dynamic pricing variation
                    content.earning += (random.nextDouble() - 0.5) * 1.0; // ¬±‚Ç¨0.50 variation
                    content.earning = Math.max(0.50, content.earning); // Minimum ‚Ç¨0.50
                    
                    personalized.add(content);
                }
                
                Log.d(TAG, "üéØ Generated " + personalized.size() + " personalized opportunities");
                return personalized;
            }
            
            public ContentOpportunity getHighValueContent() {
                ContentOpportunity bestContent = null;
                double maxEarning = 0;
                
                for (ContentOpportunity content : availableContent) {
                    if (content.earning > maxEarning) {
                        maxEarning = content.earning;
                        bestContent = content;
                    }
                }
                
                if (bestContent != null) {
                    // Add bonus for high-value content
                    bestContent.earning += random.nextDouble() * 2.0; // Up to ‚Ç¨2 bonus
                    Log.d(TAG, "üíé High-value content: " + bestContent.title + " - ‚Ç¨" + String.format("%.2f", bestContent.earning));
                }
                
                return bestContent;
            }
        }
        
        // Content Opportunity Data Class
        class ContentOpportunity {
            public String title;
            public String description;
            public double earning;
            public int durationSeconds;
            public ContentType type;
            public String color;
            public String actionUrl;
            
            public ContentOpportunity(String title, String description, double earning, 
                                    int durationSeconds, ContentType type, String color, String actionUrl) {
                this.title = title;
                this.description = description;
                this.earning = earning;
                this.durationSeconds = durationSeconds;
                this.type = type;
                this.color = color;
                this.actionUrl = actionUrl;
            }
            
            public String getFormattedDuration() {
                int minutes = durationSeconds / 60;
                int seconds = durationSeconds % 60;
                return minutes > 0 ? minutes + "m " + seconds + "s" : seconds + "s";
            }
            
            public String getFormattedEarning() {
                return "‚Ç¨" + String.format("%.2f", earning);
            }
        }
        
        enum ContentType {
            VIDEO,
            SURVEY, 
            INTERACTIVE,
            LOCAL_DEMO
        }
        EOF
        
        # 2. ENHANCED DETECTION SERVICE with Content Integration
        cat > java/com/deadtime/DeadTimeDetectionService.java << 'EOF'
        package com.deadtime;
        
        import android.app.Service;
        import android.app.NotificationManager;
        import android.app.NotificationChannel;
        import android.app.PendingIntent;
        import android.content.Intent;
        import android.content.Context;
        import android.location.Location;
        import android.location.LocationListener;
        import android.location.LocationManager;
        import android.hardware.Sensor;
        import android.hardware.SensorEvent;
        import android.hardware.SensorEventListener;
        import android.hardware.SensorManager;
        import android.os.IBinder;
        import android.os.Handler;
        import android.os.Looper;
        import android.util.Log;
        import androidx.core.app.NotificationCompat;
        import java.util.ArrayList;
        import java.util.List;
        
        public class DeadTimeDetectionService extends Service implements LocationListener, SensorEventListener {
            private static final String TAG = "DeadTimeDetection";
            private static final String CHANNEL_ID = "DeadTimeChannel";
            
            private LocationManager locationManager;
            private SensorManager sensorManager;
            private Sensor accelerometer;
            private Handler handler;
            private ContentManager contentManager;
            
            // Enhanced detection parameters
            private Location lastLocation;
            private long lastLocationTime;
            private List<Float> accelerometerValues = new ArrayList<>();
            private boolean isInDeadTime = false;
            private long deadTimeStartTime;
            private int detectionCount = 0;
            
            // Adaptive thresholds
            private static final float MOVEMENT_THRESHOLD = 1.8f;
            private static final long LOCATION_STABLE_TIME = 180000; // 3 minutes (reduced)
            private static final int ACCELEROMETER_SAMPLES = 30;
            
            @Override
            public void onCreate() {
                super.onCreate();
                Log.d(TAG, "üéØ Enhanced DeadTime Detection Service Created");
                
                handler = new Handler(Looper.getMainLooper());
                locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
                sensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
                accelerometer = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
                contentManager = new ContentManager(this);
                
                createNotificationChannel();
                startDetection();
            }
            
            private void createNotificationChannel() {
                NotificationChannel channel = new NotificationChannel(
                    CHANNEL_ID,
                    "DeadTime Opportunities",
                    NotificationManager.IMPORTANCE_HIGH
                );
                channel.setDescription("Notifiche per opportunit√† di guadagno");
                
                NotificationManager notificationManager = getSystemService(NotificationManager.class);
                notificationManager.createNotificationChannel(channel);
            }
            
            private void startDetection() {
                try {
                    locationManager.requestLocationUpdates(
                        LocationManager.GPS_PROVIDER, 
                        20000, // 20 seconds
                        5, // 5 meters
                        this
                    );
                    
                    sensorManager.registerListener(this, accelerometer, SensorManager.SENSOR_DELAY_NORMAL);
                    Log.d(TAG, "‚úÖ Enhanced detection sensors started");
                } catch (SecurityException e) {
                    Log.e(TAG, "‚ùå Permission denied for location", e);
                }
            }
            
            @Override
            public void onLocationChanged(Location location) {
                Log.d(TAG, "üìç Location: " + location.getLatitude() + ", " + location.getLongitude() + 
                           " (Accuracy: " + location.getAccuracy() + "m)");
                
                if (lastLocation != null) {
                    float distance = lastLocation.distanceTo(location);
                    long timeDiff = System.currentTimeMillis() - lastLocationTime;
                    
                    // Enhanced stationary detection
                    if (distance < 30 && timeDiff > LOCATION_STABLE_TIME && location.getAccuracy() < 50) {
                        checkForDeadTime();
                    }
                }
                
                lastLocation = location;
                lastLocationTime = System.currentTimeMillis();
            }
            
            @Override
            public void onSensorChanged(SensorEvent event) {
                if (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) {
                    float x = event.values[0];
                    float y = event.values[1];
                    float z = event.values[2];
                    
                    float acceleration = (float) Math.sqrt(x*x + y*y + z*z) - 9.8f; // Remove gravity
                    accelerometerValues.add(Math.abs(acceleration));
                    
                    if (accelerometerValues.size() > ACCELEROMETER_SAMPLES) {
                        accelerometerValues.remove(0);
                    }
                    
                    if (accelerometerValues.size() == ACCELEROMETER_SAMPLES) {
                        checkMovementPattern();
                    }
                }
            }
            
            private void checkMovementPattern() {
                float avgAcceleration = 0;
                float maxAcceleration = 0;
                
                for (float value : accelerometerValues) {
                    avgAcceleration += value;
                    maxAcceleration = Math.max(maxAcceleration, value);
                }
                avgAcceleration /= accelerometerValues.size();
                
                // More sophisticated movement detection
                if (avgAcceleration < MOVEMENT_THRESHOLD && maxAcceleration < MOVEMENT_THRESHOLD * 2) {
                    Log.d(TAG, "üö∂‚Äç‚ôÇÔ∏è Consistent minimal movement detected (avg: " + 
                              String.format("%.2f", avgAcceleration) + ")");
                    checkForDeadTime();
                }
            }
            
            private void checkForDeadTime() {
                if (!isInDeadTime) {
                    isInDeadTime = true;
                    deadTimeStartTime = System.currentTimeMillis();
                    detectionCount++;
                    
                    Log.d(TAG, "‚è∞ DEAD TIME DETECTED! (#" + detectionCount + ") Starting opportunity detection...");
                    
                    // Get personalized content
                    ContentOpportunity highValueContent = contentManager.getHighValueContent();
                    
                    // Send enhanced notification
                    sendOpportunityNotification(highValueContent);
                    
                    // Trigger main activity with content
                    Intent intent = new Intent(this, MainActivity.class);
                    intent.putExtra("deadTimeDetected", true);
                    intent.putExtra("location", lastLocation);
                    intent.putExtra("detectionCount", detectionCount);
                    intent.putExtra("contentTitle", highValueContent.title);
                    intent.putExtra("contentEarning", highValueContent.earning);
                    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);
                    startActivity(intent);
                    
                    // Reset after 10 minutes
                    handler.postDelayed(() -> {
                        isInDeadTime = false;
                        Log.d(TAG, "üîÑ Dead time detection reset");
                    }, 600000);
                }
            }
            
            private void sendOpportunityNotification(ContentOpportunity content) {
                Intent intent = new Intent(this, MainActivity.class);
                intent.putExtra("fromNotification", true);
                PendingIntent pendingIntent = PendingIntent.getActivity(
                    this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE
                );
                
                NotificationCompat.Builder builder = new NotificationCompat.Builder(this, CHANNEL_ID)
                    .setSmallIcon(android.R.drawable.ic_dialog_info)
                    .setContentTitle("üí∞ Opportunit√† DeadTime!")
                    .setContentText(content.title + " - " + content.getFormattedEarning() + 
                                   " in " + content.getFormattedDuration())
                    .setStyle(new NotificationCompat.BigTextStyle()
                        .bigText("üéØ " + content.description + "\nüí∞ Guadagna " + 
                                content.getFormattedEarning() + " in " + content.getFormattedDuration()))
                    .setPriority(NotificationCompat.PRIORITY_HIGH)
                    .setContentIntent(pendingIntent)
                    .setAutoCancel(true)
                    .setVibrate(new long[]{0, 500, 200, 500});
                
                NotificationManager notificationManager = getSystemService(NotificationManager.class);
                notificationManager.notify(1, builder.build());
                
                Log.d(TAG, "üì¢ Opportunity notification sent: " + content.title);
            }
            
            @Override
            public IBinder onBind(Intent intent) {
                return null;
            }
            
            @Override
            public void onAccuracyChanged(Sensor sensor, int accuracy) {}
            
            @Override
            public void onDestroy() {
                super.onDestroy();
                if (locationManager != null) {
                    locationManager.removeUpdates(this);
                }
                if (sensorManager != null) {
                    sensorManager.unregisterListener(this);
                }
                Log.d(TAG, "üõë Enhanced Detection Service Destroyed");
            }
        }
        EOF
        
        # 3. ADVANCED MAIN ACTIVITY with Rich UI
        cat > java/com/deadtime/MainActivity.java << 'EOF'
        package com.deadtime;
        
        import androidx.appcompat.app.AppCompatActivity;
        import androidx.core.app.ActivityCompat;
        import androidx.core.content.ContextCompat;
        import android.content.Intent;
        import android.content.pm.PackageManager;
        import android.location.Location;
        import android.os.Bundle;
        import android.util.Log;
        import android.view.View;
        import android.view.ViewGroup;
        import android.widget.TextView;
        import android.widget.Button;
        import android.widget.LinearLayout;
        import android.widget.ScrollView;
        import android.widget.ProgressBar;
        import android.graphics.Color;
        import android.graphics.Typeface;
        import android.Manifest;
        import java.util.List;
        
        public class MainActivity extends AppCompatActivity {
            private static final String TAG = "DeadTimeMain";
            private static final int PERMISSION_REQUEST_CODE = 100;
            
            private TextView statusText;
            private TextView earningsText;
            private TextView statsText;
            private LinearLayout opportunitiesContainer;
            private LinearLayout statsContainer;
            private Button startDetectionButton;
            private ProgressBar earningsProgress;
            
            private boolean detectionActive = false;
            private double totalEarnings = 0.0;
            private int completedOpportunities = 0;
            private int detectionCount = 0;
            private ContentManager contentManager;
            
            @Override
            protected void onCreate(Bundle savedInstanceState) {
                super.onCreate(savedInstanceState);
                
                Log.d(TAG, "üöÄ DeadTime Advanced UI Starting...");
                
                contentManager = new ContentManager(this);
                createAdvancedDeadTimeUI();
                handleDeadTimeIntent();
                requestNecessaryPermissions();
            }
            
            private void createAdvancedDeadTimeUI() {
                ScrollView scrollView = new ScrollView(this);
                LinearLayout mainLayout = new LinearLayout(this);
                mainLayout.setOrientation(LinearLayout.VERTICAL);
                mainLayout.setPadding(30, 40, 30, 40);
                mainLayout.setBackgroundColor(Color.parseColor("#0f0f23"));
                
                // Enhanced Header with Gradient Effect
                createHeaderSection(mainLayout);
                
                // Enhanced Stats Dashboard
                createStatsSection(mainLayout);
                
                // Status and Controls
                createControlsSection(mainLayout);
                
                // Dynamic Opportunities Feed
                createOpportunitiesSection(mainLayout);
                
                scrollView.addView(mainLayout);
                setContentView(scrollView);
                
                // Load initial content
                refreshOpportunities();
            }
            
            private void createHeaderSection(LinearLayout parent) {
                LinearLayout headerContainer = new LinearLayout(this);
                headerContainer.setOrientation(LinearLayout.VERTICAL);
                headerContainer.setPadding(25, 30, 25, 30);
                headerContainer.setBackgroundColor(Color.parseColor("#1a1a2e"));
                
                TextView headerText = new TextView(this);
                headerText.setText("üí∞ DeadTime");
                headerText.setTextSize(36);
                headerText.setTextColor(Color.parseColor("#00f5a0"));
                headerText.setTypeface(headerText.getTypeface(), Typeface.BOLD);
                headerContainer.addView(headerText);
                
                TextView subtitleText = new TextView(this);
                subtitleText.setText("AI-Powered Attention Monetization");
                subtitleText.setTextSize(14);
                subtitleText.setTextColor(Color.parseColor("#a0a0a0"));
                subtitleText.setPadding(0, 5, 0, 0);
                headerContainer.addView(subtitleText);
                
                parent.addView(headerContainer);
            }
            
            private void createStatsSection(LinearLayout parent) {
                TextView sectionTitle = new TextView(this);
                sectionTitle.setText("üìä Dashboard");
                sectionTitle.setTextSize(20);
                sectionTitle.setTextColor(Color.WHITE);
                sectionTitle.setTypeface(sectionTitle.getTypeface(), Typeface.BOLD);
                sectionTitle.setPadding(0, 30, 0, 15);
                parent.addView(sectionTitle);
                
                statsContainer = new LinearLayout(this);
                statsContainer.setOrientation(LinearLayout.HORIZONTAL);
                parent.addView(statsContainer);
                
                // Earnings Card
                LinearLayout earningsCard = createStatsCard("üí∞ Guadagni", "‚Ç¨0.00", "#00d4aa");
                earningsText = (TextView) earningsCard.getChildAt(1);
                statsContainer.addView(earningsCard);
                
                // Opportunities Card  
                LinearLayout opportunitiesCard = createStatsCard("üéØ Completate", "0", "#3498db");
                statsText = (TextView) opportunitiesCard.getChildAt(1);
                statsContainer.addView(opportunitiesCard);
                
                // Progress Bar
                earningsProgress = new ProgressBar(this, null, android.R.attr.progressBarStyleHorizontal);
                earningsProgress.setPadding(0, 20, 0, 0);
                earningsProgress.setMax(100);
                earningsProgress.setProgress(0);
                parent.addView(earningsProgress);
                
                TextView progressLabel = new TextView(this);
                progressLabel.setText("Progresso verso ‚Ç¨50 obiettivo");
                progressLabel.setTextSize(12);
                progressLabel.setTextColor(Color.parseColor("#a0a0a0"));
                progressLabel.setPadding(0, 5, 0, 0);
                parent.addView(progressLabel);
            }
            
            private LinearLayout createStatsCard(String title, String value, String color) {
                LinearLayout card = new LinearLayout(this);
                card.setOrientation(LinearLayout.VERTICAL);
                card.setPadding(20, 15, 20, 15);
                card.setBackgroundColor(Color.parseColor(color));
                
                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(0, 
                    LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f);
                params.setMargins(5, 0, 5, 0);
                card.setLayoutParams(params);
                
                TextView titleView = new TextView(this);
                titleView.setText(title);
                titleView.setTextSize(12);
                titleView.setTextColor(Color.WHITE);
                card.addView(titleView);
                
                TextView valueView = new TextView(this);
                valueView.setText(value);
                valueView.setTextSize(18);
                valueView.setTextColor(Color.WHITE);
                valueView.setTypeface(valueView.getTypeface(), Typeface.BOLD);
                valueView.setPadding(0, 5, 0, 0);
                card.addView(valueView);
                
                return card;
            }
            
            private void createControlsSection(LinearLayout parent) {
                TextView sectionTitle = new TextView(this);
                sectionTitle.setText("üéØ Controlli");
                sectionTitle.setTextSize(20);
                sectionTitle.setTextColor(Color.WHITE);
                sectionTitle.setTypeface(sectionTitle.getTypeface(), Typeface.BOLD);
                sectionTitle.setPadding(0, 30, 0, 15);
                parent.addView(sectionTitle);
                
                statusText = new TextView(this);
                statusText.setText("üîç Pronto per rilevare tempo morto...");
                statusText.setTextSize(16);
                statusText.setTextColor(Color.WHITE);
                statusText.setPadding(25, 20, 25, 20);
                statusText.setBackgroundColor(Color.parseColor("#16213e"));
                parent.addView(statusText);
                
                startDetectionButton = new Button(this);
                startDetectionButton.setText("üöÄ Avvia AI Detection");
                startDetectionButton.setTextSize(16);
                startDetectionButton.setTextColor(Color.WHITE);
                startDetectionButton.setBackgroundColor(Color.parseColor("#00f5a0"));
                startDetectionButton.setPadding(30, 25, 30, 25);
                
                LinearLayout.LayoutParams buttonParams = new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);
                buttonParams.setMargins(0, 20, 0, 0);
                startDetectionButton.setLayoutParams(buttonParams);
                
                startDetectionButton.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        toggleDetection();
                    }
                });
                parent.addView(startDetectionButton);
            }
            
            private void createOpportunitiesSection(LinearLayout parent) {
                TextView sectionTitle = new TextView(this);
                sectionTitle.setText("üéÅ Opportunit√† Personalizzate");
                sectionTitle.setTextSize(20);
                sectionTitle.setTextColor(Color.WHITE);
                sectionTitle.setTypeface(sectionTitle.getTypeface(), Typeface.BOLD);
                sectionTitle.setPadding(0, 30, 0, 15);
                parent.addView(sectionTitle);
                
                opportunitiesContainer = new LinearLayout(this);
                opportunitiesContainer.setOrientation(LinearLayout.VERTICAL);
                parent.addView(opportunitiesContainer);
            }
            
            private void refreshOpportunities() {
                opportunitiesContainer.removeAllViews();
                List<ContentOpportunity> content = contentManager.getPersonalizedContent(6);
                
                for (ContentOpportunity opportunity : content) {
                    addAdvancedOpportunityCard(opportunity);
                }
            }
            
            private void addAdvancedOpportunityCard(ContentOpportunity opportunity) {
                LinearLayout card = new LinearLayout(this);
                card.setOrientation(LinearLayout.VERTICAL);
                card.setPadding(25, 20, 25, 20);
                card.setBackgroundColor(Color.parseColor(opportunity.color));
                
                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);
                params.setMargins(0, 0, 0, 15);
                card.setLayoutParams(params);
                
                // Title
                TextView titleView = new TextView(this);
                titleView.setText(opportunity.title);
                titleView.setTextSize(16);
                titleView.setTextColor(Color.WHITE);
                titleView.setTypeface(titleView.getTypeface(), Typeface.BOLD);
                card.addView(titleView);
                
                // Description
                TextView descView = new TextView(this);
                descView.setText(opportunity.description);
                descView.setTextSize(14);
                descView.setTextColor(Color.parseColor("#f0f0f0"));
                descView.setPadding(0, 5, 0, 10);
                card.addView(descView);
                
                // Earnings and Duration
                LinearLayout metaLayout = new LinearLayout(this);
                metaLayout.setOrientation(LinearLayout.HORIZONTAL);
                
                TextView earningView = new TextView(this);
                earningView.setText("üí∞ " + opportunity.getFormattedEarning());
                earningView.setTextSize(14);
                earningView.setTextColor(Color.WHITE);
                earningView.setTypeface(earningView.getTypeface(), Typeface.BOLD);
                metaLayout.addView(earningView);
                
                TextView durationView = new TextView(this);
                durationView.setText(" ‚Ä¢ ‚è±Ô∏è " + opportunity.getFormattedDuration());
                durationView.setTextSize(14);
                durationView.setTextColor(Color.parseColor("#f0f0f0"));
                metaLayout.addView(durationView);
                
                card.addView(metaLayout);
                
                // Click handler
                card.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        completeOpportunity(opportunity);
                    }
                });
                
                opportunitiesContainer.addView(card);
            }
            
            private void completeOpportunity(ContentOpportunity opportunity) {
                // Simulate opportunity completion
                totalEarnings += opportunity.earning;
                completedOpportunities++;
                
                // Update UI
                earningsText.setText("‚Ç¨" + String.format("%.2f", totalEarnings));
                statsText.setText(String.valueOf(completedOpportunities));
                
                // Update progress bar (goal: ‚Ç¨50)
                int progress = (int) ((totalEarnings / 50.0) * 100);
                earningsProgress.setProgress(Math.min(progress, 100));
                
                // Show completion feedback
                statusText.setText("‚úÖ Completata: " + opportunity.title + " (+‚Ç¨" + 
                                 String.format("%.2f", opportunity.earning) + ")");
                statusText.setBackgroundColor(Color.parseColor("#00d4aa"));
                
                // Refresh opportunities
                refreshOpportunities();
                
                Log.d(TAG, "üí∞ Opportunity completed: " + opportunity.title + 
                           " - Earned: ‚Ç¨" + String.format("%.2f", opportunity.earning));
            }
            
            private void toggleDetection() {
                if (!detectionActive) {
                    Intent serviceIntent = new Intent(this, DeadTimeDetectionService.class);
                    startService(serviceIntent);
                    
                    detectionActive = true;
                    startDetectionButton.setText("‚èπÔ∏è Ferma AI Detection");
                    startDetectionButton.setBackgroundColor(Color.parseColor("#ff4757"));
                    statusText.setText("üü¢ AI Detection ATTIVO - Rilevamento in corso...");
                    statusText.setBackgroundColor(Color.parseColor("#00d4aa"));
                    
                    Log.d(TAG, "‚úÖ Enhanced detection service started");
                } else {
                    Intent serviceIntent = new Intent(this, DeadTimeDetectionService.class);
                    stopService(serviceIntent);
                    
                    detectionActive = false;
                    startDetectionButton.setText("üöÄ Avvia AI Detection");
                    startDetectionButton.setBackgroundColor(Color.parseColor("#00f5a0"));
                    statusText.setText("üîç AI Detection fermo - Premi per attivare");
                    statusText.setBackgroundColor(Color.parseColor("#16213e"));
                    
                    Log.d(TAG, "üõë Enhanced detection service stopped");
                }
            }
            
            private void handleDeadTimeIntent() {
                Intent intent = getIntent();
                if (intent.getBooleanExtra("deadTimeDetected", false)) {
                    detectionCount = intent.getIntExtra("detectionCount", 0);
                    String contentTitle = intent.getStringExtra("contentTitle");
                    double contentEarning = intent.getDoubleExtra("contentEarning", 0.0);
                    
                    statusText.setText("üéØ TEMPO MORTO RILEVATO! (#" + detectionCount + ") " + contentTitle);
                    statusText.setBackgroundColor(Color.parseColor("#e74c3c"));
                    
                    // Auto-complete the detected opportunity
                    totalEarnings += contentEarning;
                    completedOpportunities++;
                    
                    earningsText.setText("‚Ç¨" + String.format("%.2f", totalEarnings));
                    statsText.setText(String.valueOf(completedOpportunities));
                    
                    int progress = (int) ((totalEarnings / 50.0) * 100);
                    earningsProgress.setProgress(Math.min(progress, 100));
                    
                    refreshOpportunities();
                    
                    Log.d(TAG, "üí∞ Auto-completed opportunity from detection! Earning: ‚Ç¨" + 
                               String.format("%.2f", contentEarning));
                }
            }
            
            private void requestNecessaryPermissions() {
                String[] permissions = {
                    Manifest.permission.ACCESS_FINE_LOCATION,
                    Manifest.permission.ACCESS_COARSE_LOCATION,
                    Manifest.permission.ACCESS_BACKGROUND_LOCATION,
                    Manifest.permission.WRITE_EXTERNAL_STORAGE,
                    Manifest.permission.POST_NOTIFICATIONS
                };
                
                boolean needsPermission = false;
                for (String permission : permissions) {
                    if (ContextCompat.checkSelfPermission(this, permission) != PackageManager.PERMISSION_GRANTED) {
                        needsPermission = true;
                        break;
                    }
                }
                
                if (needsPermission) {
                    ActivityCompat.requestPermissions(this, permissions, PERMISSION_REQUEST_CODE);
                }
            }
            
            @Override
            public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
                super.onRequestPermissionsResult(requestCode, permissions, grantResults);
                if (requestCode == PERMISSION_REQUEST_CODE) {
                    boolean allGranted = true;
                    for (int result : grantResults) {
                        if (result != PackageManager.PERMISSION_GRANTED) {
                            allGranted = false;
                            break;
                        }
                    }
                    
                    if (allGranted) {
                        statusText.setText("‚úÖ Tutti i permessi concessi - Pronto per AI Detection!");
                        statusText.setBackgroundColor(Color.parseColor("#00d4aa"));
                        Log.d(TAG, "‚úÖ All permissions granted");
                    } else {
                        statusText.setText("‚ö†Ô∏è Alcuni permessi mancanti - Funzionalit√† limitate");
                        statusText.setBackgroundColor(Color.parseColor("#ff6b6b"));
                        Log.w(TAG, "‚ö†Ô∏è Some permissions denied");
                    }
                }
            }
            
            @Override
            protected void onResume() {
                super.onResume();
                refreshOpportunities();
            }
        }
        EOF
        
        # 4. APPLICATION CLASS
        cat > java/com/deadtime/MainApplication.java << 'EOF'
        package com.deadtime;
        
        import android.app.Application;
        import android.util.Log;
        
        public class MainApplication extends Application {
            private static final String TAG = "DeadTimeApp";
            
            @Override
            public void onCreate() {
                super.onCreate();
                Log.d(TAG, "üöÄ DeadTime Advanced Application Started");
                Log.d(TAG, "üìä Features: AI Detection, Content System, Rich UI");
            }
        }
        EOF

    - name: üì± Create Enhanced Android Configuration
      run: |
        cd android
        
        # Root build.gradle
        cat > build.gradle << 'EOF'
        buildscript {
            ext {
                buildToolsVersion = "33.0.0"
                minSdkVersion = 21
                compileSdkVersion = 33
                targetSdkVersion = 33
                ndkVersion = "23.1.7779620"
            }
            repositories {
                google()
                mavenCentral()
            }
            dependencies {
                classpath("com.android.tools.build:gradle:7.3.1")
            }
        }
        
        allprojects {
            repositories {
                google()
                mavenCentral()
            }
        }
        
        task clean(type: Delete) {
            delete rootProject.buildDir
        }
        EOF
        
        # settings.gradle
        cat > settings.gradle << 'EOF'
        rootProject.name = 'DeadTime'
        include ':app'
        EOF
        
        # app/build.gradle
        cd app
        cat > build.gradle << 'EOF'
        apply plugin: "com.android.application"
        
        android {
            namespace "com.deadtime"
            compileSdkVersion 33
            buildToolsVersion "33.0.0"
            
            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }
            
            defaultConfig {
                applicationId "com.deadtime"
                minSdkVersion 21
                targetSdkVersion 33
                versionCode 2
                versionName "2.0.0"
                testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            }
            
            signingConfigs {
                debug {
                    storeFile file('debug.keystore')
                    storePassword 'android'
                    keyAlias 'androiddebugkey'
                    keyPassword 'android'
                }
            }
            
            buildTypes {
                debug {
                    signingConfig signingConfigs.debug
                    debuggable true
                }
                release {
                    minifyEnabled false
                    proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
                }
            }
        }
        
        dependencies {
            implementation 'androidx.appcompat:appcompat:1.6.1'
            implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
            implementation 'com.google.android.material:material:1.8.0'
            implementation 'androidx.core:core:1.9.0'
            implementation 'androidx.work:work-runtime:2.8.1'
            testImplementation 'junit:junit:4.13.2'
            androidTestImplementation 'androidx.test.ext:junit:1.1.5'
            androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
        }
        EOF

    - name: üì≤ Create Enhanced Manifest & Resources
      run: |
        cd android/app/src/main
        
        # Enhanced AndroidManifest.xml
        cat > AndroidManifest.xml << 'EOF'
        <manifest xmlns:android="http://schemas.android.com/apk/res/android"
            package="com.deadtime">

            <!-- DEADTIME ENHANCED PERMISSIONS -->
            <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
            <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
            <uses-permission android:name="android.permission.ACCESS_BACKGROUND_LOCATION" />
            <uses-permission android:name="android.permission.INTERNET" />
            <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
            <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
            <uses-permission android:name="android.permission.POST_NOTIFICATIONS" />
            <uses-permission android:name="android.permission.VIBRATE" />
            <uses-permission android:name="android.permission.WAKE_LOCK" />
            
            <!-- HARDWARE FEATURES -->
            <uses-feature android:name="android.hardware.location" android:required="true" />
            <uses-feature android:name="android.hardware.location.gps" android:required="true" />
            <uses-feature android:name="android.hardware.sensor.accelerometer" android:required="true" />

            <application
              android:name=".MainApplication"
              android:allowBackup="false"
              android:theme="@style/DeadTimeTheme"
              android:label="@string/app_name"
              android:requestLegacyExternalStorage="true">
              
              <!-- MAIN ACTIVITY -->
              <activity
                android:name=".MainActivity"
                android:exported="true"
                android:screenOrientation="portrait"
                android:theme="@style/DeadTimeTheme">
                <intent-filter>
                    <action android:name="android.intent.action.MAIN" />
                    <category android:name="android.intent.category.LAUNCHER" />
                </intent-filter>
              </activity>
              
              <!-- ENHANCED DETECTION SERVICE -->
              <service 
                android:name=".DeadTimeDetectionService"
                android:enabled="true"
                android:exported="false"
                android:foregroundServiceType="location" />
              
            </application>
        </manifest>
        EOF
        
        # Enhanced resources
        mkdir -p res/values
        cat > res/values/strings.xml << 'EOF'
        <resources>
            <string name="app_name">DeadTime</string>
            <string name="app_description">AI-Powered Attention Monetization</string>
            <string name="notification_channel_name">DeadTime Opportunities</string>
            <string name="notification_channel_description">Notifiche per opportunit√† di guadagno</string>
        </resources>
        EOF
        
        cat > res/values/styles.xml << 'EOF'
        <resources>
            <style name="DeadTimeTheme" parent="Theme.AppCompat.Light.NoActionBar">
                <item name="android:statusBarColor">#0f0f23</item>
                <item name="android:navigationBarColor">#0f0f23</item>
                <item name="android:windowBackground">#0f0f23</item>
                <item name="colorPrimary">#00f5a0</item>
                <item name="colorPrimaryDark">#00d484</item>
                <item name="colorAccent">#00f5a0</item>
                <item name="android:textColorPrimary">#ffffff</item>
                <item name="android:textColorSecondary">#a0a0a0</item>
            </style>
        </resources>
        EOF

    - name: üîë Create Debug Keystore
      run: |
        cd android/app
        keytool -genkey -v -keystore debug.keystore -storepass android -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 10000 -dname "CN=Android Debug,O=Android,C=US"

    - name: üèóÔ∏è Setup Gradle Wrapper
      run: |
        cd android
        gradle wrapper --gradle-version 8.0.2
        chmod +x gradlew

    - name: üßπ Clean Project
      run: |
        cd android
        ./gradlew clean

    - name: üöÄ Build DeadTime Advanced UI + Content System
      run: |
        cd android
        ./gradlew assembleDebug --stacktrace --no-daemon

    - name: ‚úÖ Verify Enhanced APK Creation
      run: |
        cd android
        if [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
          echo "üéâ SUCCESS! DeadTime Advanced UI + Content System APK created!"
          echo "üì± Features: Rich UI, Content Manager, Enhanced Detection, Notifications"
          ls -la app/build/outputs/apk/debug/
          file app/build/outputs/apk/debug/app-debug.apk
        else
          echo "‚ùå APK not found!"
          exit 1
        fi

    - name: üì¶ Upload DeadTime Advanced APK
      uses: actions/upload-artifact@v4
      with:
        name: deadtime-advanced-ui-content-apk
        path: android/app/build/outputs/apk/debug/app-debug.apk
