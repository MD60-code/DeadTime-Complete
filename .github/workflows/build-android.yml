name: DeadTime Step 1 - Detection Engine Android

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r23c
        
    - name: Set NDK environment variables
      run: |
        echo "ANDROID_NDK_ROOT=$ANDROID_NDK_HOME" >> $GITHUB_ENV
        echo "ANDROID_NDK_HOME=$ANDROID_NDK_HOME" >> $GITHUB_ENV
        echo "NDK_HOME=$ANDROID_NDK_HOME" >> $GITHUB_ENV

    - name: üßπ Clean Previous Build
      run: |
        rm -rf node_modules
        rm -rf package-lock.json
        rm -rf android/app/src/main/java/

    - name: üéØ Create DeadTime Detection Engine
      run: |
        cd android/app/src/main
        
        # Create complete DeadTime app structure
        mkdir -p java/com/deadtime
        
        # 1. CORE: Detection Service with GPS + Accelerometer
        cat > java/com/deadtime/DeadTimeDetectionService.java << 'EOF'
        package com.deadtime;
        
        import android.app.Service;
        import android.content.Intent;
        import android.content.Context;
        import android.location.Location;
        import android.location.LocationListener;
        import android.location.LocationManager;
        import android.hardware.Sensor;
        import android.hardware.SensorEvent;
        import android.hardware.SensorEventListener;
        import android.hardware.SensorManager;
        import android.os.IBinder;
        import android.os.Handler;
        import android.os.Looper;
        import android.util.Log;
        import java.util.ArrayList;
        import java.util.List;
        
        public class DeadTimeDetectionService extends Service implements LocationListener, SensorEventListener {
            private static final String TAG = "DeadTimeDetection";
            private LocationManager locationManager;
            private SensorManager sensorManager;
            private Sensor accelerometer;
            private Handler handler;
            
            // Detection parameters
            private Location lastLocation;
            private long lastLocationTime;
            private List<Float> accelerometerValues = new ArrayList<>();
            private boolean isInDeadTime = false;
            private long deadTimeStartTime;
            
            // Thresholds for dead time detection
            private static final float MOVEMENT_THRESHOLD = 2.0f;
            private static final long LOCATION_STABLE_TIME = 300000; // 5 minutes
            private static final int ACCELEROMETER_SAMPLES = 50;
            
            @Override
            public void onCreate() {
                super.onCreate();
                Log.d(TAG, "üéØ DeadTime Detection Service Created");
                
                handler = new Handler(Looper.getMainLooper());
                locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
                sensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
                accelerometer = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
                
                startDetection();
            }
            
            private void startDetection() {
                try {
                    // Start GPS tracking
                    locationManager.requestLocationUpdates(
                        LocationManager.GPS_PROVIDER, 
                        30000, // 30 seconds
                        10, // 10 meters
                        this
                    );
                    
                    // Start accelerometer tracking
                    sensorManager.registerListener(this, accelerometer, SensorManager.SENSOR_DELAY_NORMAL);
                    
                    Log.d(TAG, "‚úÖ Detection sensors started");
                } catch (SecurityException e) {
                    Log.e(TAG, "‚ùå Permission denied for location", e);
                }
            }
            
            @Override
            public void onLocationChanged(Location location) {
                Log.d(TAG, "üìç Location: " + location.getLatitude() + ", " + location.getLongitude());
                
                if (lastLocation != null) {
                    float distance = lastLocation.distanceTo(location);
                    long timeDiff = System.currentTimeMillis() - lastLocationTime;
                    
                    // Check if user is stationary
                    if (distance < 50 && timeDiff > LOCATION_STABLE_TIME) {
                        checkForDeadTime();
                    }
                }
                
                lastLocation = location;
                lastLocationTime = System.currentTimeMillis();
            }
            
            @Override
            public void onSensorChanged(SensorEvent event) {
                if (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) {
                    float x = event.values[0];
                    float y = event.values[1];
                    float z = event.values[2];
                    
                    float acceleration = (float) Math.sqrt(x*x + y*y + z*z);
                    accelerometerValues.add(acceleration);
                    
                    // Keep only recent samples
                    if (accelerometerValues.size() > ACCELEROMETER_SAMPLES) {
                        accelerometerValues.remove(0);
                    }
                    
                    // Check movement pattern
                    if (accelerometerValues.size() == ACCELEROMETER_SAMPLES) {
                        checkMovementPattern();
                    }
                }
            }
            
            private void checkMovementPattern() {
                float avgAcceleration = 0;
                for (float value : accelerometerValues) {
                    avgAcceleration += value;
                }
                avgAcceleration /= accelerometerValues.size();
                
                // If very little movement detected
                if (avgAcceleration < MOVEMENT_THRESHOLD) {
                    Log.d(TAG, "üö∂‚Äç‚ôÇÔ∏è Minimal movement detected");
                    checkForDeadTime();
                }
            }
            
            private void checkForDeadTime() {
                if (!isInDeadTime) {
                    isInDeadTime = true;
                    deadTimeStartTime = System.currentTimeMillis();
                    
                    Log.d(TAG, "‚è∞ DEAD TIME DETECTED! Starting opportunity detection...");
                    
                    // Trigger opportunity notification
                    Intent intent = new Intent(this, MainActivity.class);
                    intent.putExtra("deadTimeDetected", true);
                    intent.putExtra("location", lastLocation);
                    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                    startActivity(intent);
                }
            }
            
            @Override
            public IBinder onBind(Intent intent) {
                return null;
            }
            
            @Override
            public void onAccuracyChanged(Sensor sensor, int accuracy) {}
            
            @Override
            public void onDestroy() {
                super.onDestroy();
                if (locationManager != null) {
                    locationManager.removeUpdates(this);
                }
                if (sensorManager != null) {
                    sensorManager.unregisterListener(this);
                }
                Log.d(TAG, "üõë Detection Service Destroyed");
            }
        }
        EOF
        
        # 2. MAIN ACTIVITY: DeadTime Dashboard
        cat > java/com/deadtime/MainActivity.java << 'EOF'
        package com.deadtime;
        
        import androidx.appcompat.app.AppCompatActivity;
        import androidx.core.app.ActivityCompat;
        import androidx.core.content.ContextCompat;
        import android.content.Intent;
        import android.content.pm.PackageManager;
        import android.location.Location;
        import android.os.Bundle;
        import android.util.Log;
        import android.view.View;
        import android.widget.TextView;
        import android.widget.Button;
        import android.widget.LinearLayout;
        import android.widget.ScrollView;
        import android.graphics.Color;
        import android.Manifest;
        
        public class MainActivity extends AppCompatActivity {
            private static final String TAG = "DeadTimeMain";
            private static final int PERMISSION_REQUEST_CODE = 100;
            
            private TextView statusText;
            private TextView earningsText;
            private LinearLayout opportunitiesContainer;
            private Button startDetectionButton;
            private boolean detectionActive = false;
            private double totalEarnings = 0.0;
            
            @Override
            protected void onCreate(Bundle savedInstanceState) {
                super.onCreate(savedInstanceState);
                
                Log.d(TAG, "üöÄ DeadTime App Starting...");
                
                // Create dynamic UI
                createDeadTimeUI();
                
                // Check for dead time detection from service
                handleDeadTimeIntent();
                
                // Request permissions
                requestNecessaryPermissions();
            }
            
            private void createDeadTimeUI() {
                ScrollView scrollView = new ScrollView(this);
                LinearLayout mainLayout = new LinearLayout(this);
                mainLayout.setOrientation(LinearLayout.VERTICAL);
                mainLayout.setPadding(40, 60, 40, 40);
                mainLayout.setBackgroundColor(Color.parseColor("#1a1a2e"));
                
                // Header
                TextView headerText = new TextView(this);
                headerText.setText("üí∞ DeadTime");
                headerText.setTextSize(32);
                headerText.setTextColor(Color.parseColor("#00d4aa"));
                headerText.setPadding(0, 0, 0, 30);
                mainLayout.addView(headerText);
                
                TextView subtitleText = new TextView(this);
                subtitleText.setText("Trasforma l'attesa in opportunit√†");
                subtitleText.setTextSize(16);
                subtitleText.setTextColor(Color.parseColor("#a0a0a0"));
                subtitleText.setPadding(0, 0, 0, 40);
                mainLayout.addView(subtitleText);
                
                // Status Section
                statusText = new TextView(this);
                statusText.setText("üîç Pronto per rilevare tempo morto...");
                statusText.setTextSize(18);
                statusText.setTextColor(Color.WHITE);
                statusText.setPadding(20, 20, 20, 20);
                statusText.setBackgroundColor(Color.parseColor("#16213e"));
                mainLayout.addView(statusText);
                
                // Earnings Section
                earningsText = new TextView(this);
                earningsText.setText("üí∞ Guadagni totali: ‚Ç¨" + String.format("%.2f", totalEarnings));
                earningsText.setTextSize(20);
                earningsText.setTextColor(Color.parseColor("#00d4aa"));
                earningsText.setPadding(20, 30, 20, 20);
                mainLayout.addView(earningsText);
                
                // Start Detection Button
                startDetectionButton = new Button(this);
                startDetectionButton.setText("üéØ Avvia Rilevamento");
                startDetectionButton.setTextSize(18);
                startDetectionButton.setTextColor(Color.WHITE);
                startDetectionButton.setBackgroundColor(Color.parseColor("#00d4aa"));
                startDetectionButton.setPadding(30, 20, 30, 20);
                startDetectionButton.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        toggleDetection();
                    }
                });
                mainLayout.addView(startDetectionButton);
                
                // Opportunities Container
                TextView opportunitiesTitle = new TextView(this);
                opportunitiesTitle.setText("üéÅ Opportunit√† Disponibili");
                opportunitiesTitle.setTextSize(20);
                opportunitiesTitle.setTextColor(Color.WHITE);
                opportunitiesTitle.setPadding(0, 40, 0, 20);
                mainLayout.addView(opportunitiesTitle);
                
                opportunitiesContainer = new LinearLayout(this);
                opportunitiesContainer.setOrientation(LinearLayout.VERTICAL);
                mainLayout.addView(opportunitiesContainer);
                
                scrollView.addView(mainLayout);
                setContentView(scrollView);
                
                // Add sample opportunities
                addSampleOpportunities();
            }
            
            private void addSampleOpportunities() {
                addOpportunityCard("üì∫ Guarda Video Prodotto", "‚Ç¨2.50", "2 minuti", "#4a90e2");
                addOpportunityCard("üìã Completa Sondaggio", "‚Ç¨1.80", "3 minuti", "#7b68ee");
                addOpportunityCard("üéÆ Micro-Task Gamificato", "‚Ç¨3.20", "5 minuti", "#32cd32");
                addOpportunityCard("üõçÔ∏è Demo Prodotto Locale", "‚Ç¨4.50", "4 minuti", "#ff6347");
            }
            
            private void addOpportunityCard(String title, String earning, String duration, String color) {
                LinearLayout card = new LinearLayout(this);
                card.setOrientation(LinearLayout.VERTICAL);
                card.setPadding(25, 20, 25, 20);
                card.setBackgroundColor(Color.parseColor(color));
                
                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.MATCH_PARENT,
                    LinearLayout.LayoutParams.WRAP_CONTENT
                );
                params.setMargins(0, 0, 0, 15);
                card.setLayoutParams(params);
                
                TextView titleView = new TextView(this);
                titleView.setText(title);
                titleView.setTextSize(16);
                titleView.setTextColor(Color.WHITE);
                card.addView(titleView);
                
                TextView detailsView = new TextView(this);
                detailsView.setText(earning + " ‚Ä¢ " + duration);
                detailsView.setTextSize(14);
                detailsView.setTextColor(Color.parseColor("#f0f0f0"));
                detailsView.setPadding(0, 5, 0, 0);
                card.addView(detailsView);
                
                opportunitiesContainer.addView(card);
            }
            
            private void toggleDetection() {
                if (!detectionActive) {
                    // Start detection service
                    Intent serviceIntent = new Intent(this, DeadTimeDetectionService.class);
                    startService(serviceIntent);
                    
                    detectionActive = true;
                    startDetectionButton.setText("‚èπÔ∏è Ferma Rilevamento");
                    startDetectionButton.setBackgroundColor(Color.parseColor("#ff4757"));
                    statusText.setText("üü¢ Rilevamento ATTIVO - In attesa di tempo morto...");
                    
                    Log.d(TAG, "‚úÖ Detection service started");
                } else {
                    // Stop detection service
                    Intent serviceIntent = new Intent(this, DeadTimeDetectionService.class);
                    stopService(serviceIntent);
                    
                    detectionActive = false;
                    startDetectionButton.setText("üéØ Avvia Rilevamento");
                    startDetectionButton.setBackgroundColor(Color.parseColor("#00d4aa"));
                    statusText.setText("üîç Rilevamento fermo - Premi per attivare");
                    
                    Log.d(TAG, "üõë Detection service stopped");
                }
            }
            
            private void handleDeadTimeIntent() {
                Intent intent = getIntent();
                if (intent.getBooleanExtra("deadTimeDetected", false)) {
                    Location location = intent.getParcelableExtra("location");
                    
                    statusText.setText("üéØ TEMPO MORTO RILEVATO! Opportunit√† disponibili:");
                    statusText.setBackgroundColor(Color.parseColor("#00d4aa"));
                    
                    // Simulate earning from detected opportunity
                    double earning = 2.50 + (Math.random() * 3.0); // ‚Ç¨2.50-5.50
                    totalEarnings += earning;
                    earningsText.setText("üí∞ Guadagni totali: ‚Ç¨" + String.format("%.2f", totalEarnings));
                    
                    Log.d(TAG, "üí∞ Opportunity triggered! Earning: ‚Ç¨" + String.format("%.2f", earning));
                }
            }
            
            private void requestNecessaryPermissions() {
                String[] permissions = {
                    Manifest.permission.ACCESS_FINE_LOCATION,
                    Manifest.permission.ACCESS_COARSE_LOCATION,
                    Manifest.permission.WRITE_EXTERNAL_STORAGE
                };
                
                boolean needsPermission = false;
                for (String permission : permissions) {
                    if (ContextCompat.checkSelfPermission(this, permission) != PackageManager.PERMISSION_GRANTED) {
                        needsPermission = true;
                        break;
                    }
                }
                
                if (needsPermission) {
                    ActivityCompat.requestPermissions(this, permissions, PERMISSION_REQUEST_CODE);
                }
            }
            
            @Override
            public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
                super.onRequestPermissionsResult(requestCode, permissions, grantResults);
                if (requestCode == PERMISSION_REQUEST_CODE) {
                    boolean allGranted = true;
                    for (int result : grantResults) {
                        if (result != PackageManager.PERMISSION_GRANTED) {
                            allGranted = false;
                            break;
                        }
                    }
                    
                    if (allGranted) {
                        statusText.setText("‚úÖ Permessi concessi - Pronto per il rilevamento!");
                        Log.d(TAG, "‚úÖ All permissions granted");
                    } else {
                        statusText.setText("‚ö†Ô∏è Permessi necessari per il funzionamento");
                        Log.w(TAG, "‚ö†Ô∏è Some permissions denied");
                    }
                }
            }
        }
        EOF
        
        # 3. APPLICATION CLASS
        cat > java/com/deadtime/MainApplication.java << 'EOF'
        package com.deadtime;
        
        import android.app.Application;
        import android.util.Log;
        
        public class MainApplication extends Application {
            private static final String TAG = "DeadTimeApp";
            
            @Override
            public void onCreate() {
                super.onCreate();
                Log.d(TAG, "üöÄ DeadTime Application Started");
            }
        }
        EOF

    - name: üì± Create Android Configuration
      run: |
        cd android
        
        # Root build.gradle
        cat > build.gradle << 'EOF'
        buildscript {
            ext {
                buildToolsVersion = "33.0.0"
                minSdkVersion = 21
                compileSdkVersion = 33
                targetSdkVersion = 33
                ndkVersion = "23.1.7779620"
            }
            repositories {
                google()
                mavenCentral()
            }
            dependencies {
                classpath("com.android.tools.build:gradle:7.3.1")
            }
        }
        
        allprojects {
            repositories {
                google()
                mavenCentral()
            }
        }
        
        task clean(type: Delete) {
            delete rootProject.buildDir
        }
        EOF
        
        # settings.gradle
        cat > settings.gradle << 'EOF'
        rootProject.name = 'DeadTime'
        include ':app'
        EOF
        
        # app/build.gradle
        cd app
        cat > build.gradle << 'EOF'
        apply plugin: "com.android.application"
        
        android {
            namespace "com.deadtime"
            compileSdkVersion 33
            buildToolsVersion "33.0.0"
            
            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }
            
            defaultConfig {
                applicationId "com.deadtime"
                minSdkVersion 21
                targetSdkVersion 33
                versionCode 1
                versionName "1.0.0"
                testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            }
            
            signingConfigs {
                debug {
                    storeFile file('debug.keystore')
                    storePassword 'android'
                    keyAlias 'androiddebugkey'
                    keyPassword 'android'
                }
            }
            
            buildTypes {
                debug {
                    signingConfig signingConfigs.debug
                    debuggable true
                }
                release {
                    minifyEnabled false
                    proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
                }
            }
        }
        
        dependencies {
            implementation 'androidx.appcompat:appcompat:1.6.1'
            implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
            implementation 'com.google.android.material:material:1.8.0'
            implementation 'androidx.core:core:1.9.0'
            testImplementation 'junit:junit:4.13.2'
            androidTestImplementation 'androidx.test.ext:junit:1.1.5'
            androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
        }
        EOF

    - name: üì≤ Create Android Manifest & Resources
      run: |
        cd android/app/src/main
        
        # AndroidManifest.xml with all permissions
        cat > AndroidManifest.xml << 'EOF'
        <manifest xmlns:android="http://schemas.android.com/apk/res/android"
            package="com.deadtime">

            <!-- DEADTIME CORE PERMISSIONS -->
            <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
            <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
            <uses-permission android:name="android.permission.ACCESS_BACKGROUND_LOCATION" />
            <uses-permission android:name="android.permission.INTERNET" />
            <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
            <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
            
            <!-- HARDWARE ACCESS -->
            <uses-feature android:name="android.hardware.location" android:required="true" />
            <uses-feature android:name="android.hardware.sensor.accelerometer" android:required="true" />

            <application
              android:name=".MainApplication"
              android:allowBackup="false"
              android:theme="@style/AppTheme"
              android:label="@string/app_name">
              
              <!-- MAIN ACTIVITY -->
              <activity
                android:name=".MainActivity"
                android:exported="true"
                android:theme="@style/AppTheme">
                <intent-filter>
                    <action android:name="android.intent.action.MAIN" />
                    <category android:name="android.intent.category.LAUNCHER" />
                </intent-filter>
              </activity>
              
              <!-- DETECTION SERVICE -->
              <service 
                android:name=".DeadTimeDetectionService"
                android:enabled="true"
                android:exported="false" />
              
            </application>
        </manifest>
        EOF
        
        # Create resources
        mkdir -p res/values
        cat > res/values/strings.xml << 'EOF'
        <resources>
            <string name="app_name">DeadTime</string>
        </resources>
        EOF
        
        cat > res/values/styles.xml << 'EOF'
        <resources>
            <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
                <item name="android:statusBarColor">#1a1a2e</item>
                <item name="android:windowBackground">#1a1a2e</item>
                <item name="colorPrimary">#00d4aa</item>
                <item name="colorPrimaryDark">#00a084</item>
                <item name="colorAccent">#00d4aa</item>
            </style>
        </resources>
        EOF

    - name: üîë Create Debug Keystore
      run: |
        cd android/app
        keytool -genkey -v -keystore debug.keystore -storepass android -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 10000 -dname "CN=Android Debug,O=Android,C=US"

    - name: üèóÔ∏è Setup Gradle Wrapper
      run: |
        cd android
        gradle wrapper --gradle-version 8.0.2
        chmod +x gradlew

    - name: üßπ Clean Project
      run: |
        cd android
        ./gradlew clean

    - name: üöÄ Build DeadTime Detection Engine
      run: |
        cd android
        ./gradlew assembleDebug --stacktrace --no-daemon

    - name: ‚úÖ Verify APK Creation
      run: |
        cd android
        if [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
          echo "üéâ SUCCESS! DeadTime Detection Engine APK created!"
          ls -la app/build/outputs/apk/debug/
          file app/build/outputs/apk/debug/app-debug.apk
        else
          echo "‚ùå APK not found!"
          exit 1
        fi

    - name: üì¶ Upload DeadTime Detection APK
      uses: actions/upload-artifact@v4
      with:
        name: deadtime-detection-engine-apk
        path: android/app/build/outputs/apk/debug/app-debug.apk
